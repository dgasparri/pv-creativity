// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include <windows.h>
#include <FL/Fl.H>
#include "PVCreativityUI.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Text_Buffer.H>
#include <FL/Fl_File_Chooser.H>
#include <iostream>
#include "../lib/panel_io.h"
#include <fstream>
#include <math.h>
#include "PanelView.h"
#include "../lib/panel_io.h"
#include "../lib/sun_fp.h"
#include "../lib/sun_panel_fp.h"
#include "../lib/geometry_fp.h"
#include <algorithm>

using namespace std;

std::string nf = "";
double refraction_holder;
double thickness_holder;
double K_holder;
std::vector<geometry::vertex*> vertices;
std::string nomeFile;


void calcola(double n_refraction_index, double thickness, double K) {

	std::cout << " SIZE VERTEXS DENTRO A CALCOLIAMUS: " << vertices.size();
	//definisco il file di testo  
	ofstream myfile;
	myfile.open("outputS.txt");

	//valori polycristalline
	double a0 = 0.918093;
	double a1 = 0.086257;
	double a2 = -0.024459;
	double a3 = 0.002816;
	double a4 = -0.000126;
	double L_rad = 44 / 180 * M_PI;


	std::vector<geometry::triangle> triangles;
	triangles.reserve(vertices.size() / 3 + 1);
	//Checks for 3 available vertices
	for (int i = 0; i + 2 < vertices.size(); i += 3) {
		triangles.emplace_back(geometry::triangle(*vertices[i], *vertices[i + 1], *vertices[i + 2]));
		geometry::plane pl = geometry::fplane(*vertices[i], *vertices[i + 1], *vertices[i + 2]);
	}
	
	//giorno
	for (int i = 1; i <= 365; i++)
	{
		//ora
		for (int j = 0; j < 24; j++)
		{
			//definisco posizione sole
			int h = 720 - j * 60;
			const pv_sun::position_in_sky* pos = pv_sun::sun(
				i,
				h,
				L_rad
			);

			//risultato S
			double S = 0;
			//triangolo

		   for (geometry::triangle t : triangles) {

				double cos_theta = compute_cos_theta(L_rad, t.mbeta_rad, t.mZ_S_rad, pos->delta_rad, pos->h_rad);
				double R_B = compute_R_B(cos_theta, pos->cos_Phi);
				double M = compute_M(pos->m, a0, a1, a2, a3, a4);
				double theta_r = compute_theta_r(acos(cos_theta), n_refraction_index);
				double taualpha_B = compute_taualpha_B(K, thickness, theta_r, acos(cos_theta));
				double taualpha_n = compute_taualpha_n(K, thickness, n_refraction_index);
				double K_theta_B = compute_K_theta_B(taualpha_B, taualpha_n);
				double calcolaS = 1;
				S += calcolaS;
				
			}
			//stampa informazioni
			myfile << i << " " << j << " " << S << "\n";
		}
		//stampa riga vuota
		myfile << "\n";
	}

	myfile.close();
	std::cout << " FILE CREATO NELLA CARTELLA DEL PROGETTO: " << "";

}
void PVCreativityUI::cb_compute_i(Fl_Button*, void*) {

	calcola(refraction_holder, thickness_holder, K_holder);
}
void PVCreativityUI::cb_compute(Fl_Button* o, void* v) {
  ((PVCreativityUI*)(o->parent()->parent()->user_data()))->cb_compute_i(o,v);
}



 void assignFile(Fl_File_Chooser* w, void* userdata)
{
    std::cout << "FILE: " << w->value();
	nomeFile = w->value();
	nf = w->value();
	vertices = panel_io::load_vertices(nomeFile);
	std::cout << " SIZE VERTEXSSS: " << vertices.size();
	init(vertices);
	panel_opengl::draw(vertices);
	
	
	
}
void open_input_file()
{

	Fl_File_Chooser *fc = new Fl_File_Chooser(".", NULL, 0, "Input File");
	fc->callback(assignFile);
	fc->show();
	
}
PVCreativityUI::PVCreativityUI() {
  { 
		

		window = new Fl_Double_Window(1024, 800, "Photovoltaic Creativity");
        window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(640, 40, 230, 585, "Input Values");
      o->box(FL_THIN_UP_BOX);
	  { 
		  openfile = new Fl_Button(660, 50, 195, 20, "Segli File");
		  openfile->callback((Fl_Callback*)open_input_file);

      } // Fl_Value_Input* beta
      { L_T = new Fl_Value_Input(760, 150, 95, 23, "Glass Thickness");
        L_T->value(0.002);
		thickness_holder = L_T->value();
      } // Fl_Value_Input* L_T
      { G_B = new Fl_Value_Input(760, 300, 95, 23, "G_B");
        G_B->maximum(2000);
        G_B->value(715);
      } // Fl_Value_Input* G_B
      { compute = new Fl_Button(660, 590, 195, 20, "Compute");
        compute->callback((Fl_Callback*)cb_compute);
      } // Fl_Button* compute
      { N = new Fl_Value_Input(760, 240, 95, 23, "Day");
        N->minimum(1);
        N->maximum(365);
        N->value(1);
      } // Fl_Value_Input* N
      { minutes = new Fl_Value_Input(760, 270, 95, 23, "Minutes");
        minutes->minimum(-720);
        minutes->maximum(720);
      } // Fl_Value_Input* minutes
      { Z_S = new Fl_Value_Input(760, 120, 95, 23, "Z_S");
        Z_S->maximum(360);
      } // Fl_Value_Input* Z_S
      { n = new Fl_Value_Input(760, 180, 95, 23, "Refraction index");
        n->maximum(10);
        n->value(1.526);
		refraction_holder = n->value();
      } // Fl_Value_Input* n
      { K = new Fl_Value_Input(760, 210, 95, 23, "K");
        K->maximum(100);
        K->value(4);
		K_holder = K->value();

      } // Fl_Value_Input* K
      o->end();
    } // Fl_Group* o
    { panel = new PanelView(25, 25, 600, 600, "pframe");
      
    } // PanelView* panel
    {
		results = new Fl_Text_Display(25, 645, 600, 150, "Results");
	    const char* text = nf.c_str();
		results->insert(text );

    } // Fl_Text_Display* results
    window->end();
  } // Fl_Double_Window* window
}

void PVCreativityUI::show(int argc, char **argv) {
  this->window->show(argc,argv);
  nomeFile = "C:/Users/andre/source/repos/Progetto/geometries/trianglesCirc2.csv";
  vertices = panel_io::load_vertices(nomeFile);
}
