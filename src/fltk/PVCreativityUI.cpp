// generated by Fast Light User Interface Designer (fluid) version 1.0305
#define _CRT_NONSTDC_NO_DEPRECATE
#include <windows.h>
#include <FL/Fl.H>
#include "PVCreativityUI.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Text_Buffer.H>
#include <Fl/Fl_Text_Editor.H>
#include <FL/Fl_File_Chooser.H>
#include <iostream>
#include "../lib/panel_io.h"
#include <fstream>
#include <sstream>
#include <math.h>
#include "PanelView.h"
#include "../lib/panel_io.h"
#include "../lib/sun_fp.h"
#include "../lib/sun_panel_fp.h"
#include "../lib/geometry_fp.h"
#include <algorithm>
#include "../../pv-creativity/gnuplot.h"
#include "../lib/panel_irradiance.h"

using namespace std;

std::string nf = "";
double refraction_holder = 1.526;
double thickness_holder  = 0.002;
double K_holder          = 4;
double L_rad             = 44 / 180 * M_PI;



Fl_Value_Input* L_T;
Fl_Value_Input* K_;
Fl_Value_Input* n;
Fl_Value_Input* L;

std::vector<geometry::vertex*> vertices;
std::string nomeFile;

namespace patch
{
	template < typename T > std::string to_string(const T& n)
	{
		std::ostringstream stm;
		stm << n;
		return stm.str();
	}
}
void calcola(double n_refraction_index, double thickness, double K, Fl_Text_Buffer* buff, Fl_Value_Input* L_T, Fl_Value_Input* K_, Fl_Value_Input* n, Fl_Value_Input* L) {

	//std::cout << " SIZE VERTEXS DENTRO A CALCOLIAMUS: " << vertices.size();
	//definisco il file di testo  
	ofstream myfile;
	nf = "";
	myfile.open("outputS.txt");

	//valori polycristalline
	double a0 = 0.918093;
	double a1 = 0.086257;
	double a2 = -0.024459;
	double a3 = 0.002816;
	double a4 = -0.000126;
	


	std::vector<geometry::triangle> triangles;
	triangles.reserve(vertices.size() / 3 + 1);
	//Checks for 3 available vertices
	for (int i = 0; i + 2 < vertices.size(); i += 3) {
		triangles.emplace_back(geometry::triangle(*vertices[i], *vertices[i + 1], *vertices[i + 2]));
		geometry::plane pl = geometry::fplane(*vertices[i], *vertices[i + 1], *vertices[i + 2]);
	}
	
	//giorno
	for (int i = 1; i <= 365; i++)
	{
		//ora
		for (int j = 0; j < 24; j++)
		{
			//definisco posizione sole

			L_rad = L->value();

			int h = 720 - j * 60;
			const pv_sun::position_in_sky* pos = pv_sun::sun(
				i,
				h,
				L_rad
			);

			//risultato S
			double S = 0;
			//triangolo
			for (geometry::triangle t : triangles) {

				thickness_holder  = L_T->value();
				K_holder          = K_->value();
				refraction_holder = n->value();

				double S_temp = panel_irradiance::compute_S(

					pos,

					i,

					L_rad,

					t.mbeta_rad,

					t.mZ_S_rad,

					refraction_holder,

					thickness_holder,

					K_holder,

					alpha_0,

					alpha_1,

					alpha_2,

					alpha_3,

					alpha_4

				);

				S += (S_temp / 3600);

			}
		   /*for (geometry::triangle t : triangles) {

				double cos_theta = compute_cos_theta(L_rad, t.mbeta_rad, t.mZ_S_rad, pos->delta_rad, pos->h_rad);
				double R_B = compute_R_B(cos_theta, pos->cos_Phi);
				double M = compute_M(pos->m, a0, a1, a2, a3, a4);
				double theta_r = compute_theta_r(acos(cos_theta), n_refraction_index);
				double taualpha_B = compute_taualpha_B(K, thickness, theta_r, acos(cos_theta));
				double taualpha_n = compute_taualpha_n(K, thickness, n_refraction_index);
				double K_theta_B = compute_K_theta_B(taualpha_B, taualpha_n);
				double calcolaS = 1;
				S += calcolaS;
				
			}*/
			//stampa informazioni
			nf += std::string("GIORNO:") + patch::to_string(i)  + std::string(" ORA: ") + patch::to_string(j)  + std::string(" Rendimento: ")  + patch::to_string(S) + "\n";
			//cout << nf;
			//char* arr = new char [nf.length()];
			
			char* chr = strdup(nf.c_str());
			buff->text(chr);
			myfile << i << " " << j << " " << S << "\n";
			free(chr);
		}
		//stampa riga vuota
		myfile << "\n";
	}

	myfile.close();
	std::cout << " FILE CREATO NELLA CARTELLA DEL PROGETTO: " << "";

}

void PlotIT()
{

	/*
	
		"set xlabel 'Day of year' "
			"set ylabel 'Hour' "
			"set xrange[1:36] "
			"set yrange[9:18] "
			"set palette "
			"set pm3d at s "
			"splot 'C:\\Users\\andre\\source\\repos\\pv-creativity\\pv-creativity\\outputS.txt' with lines "
	
	*/
		GnuplotPipe gp;	
		gp.sendLine("set terminal wxt size 800,800 \n"
			"set title 'Solar Absorption' \n"
			"set xlabel 'Day of year' \n"
			"set ylabel 'Hour' \n"
			"set xrange[1:36] \n"
			"set yrange[9:18] \n"
			"set palette\n "
			"set pm3d at s \n"
			"splot 'C:\\Users\\andre\\source\\repos\\pv-creativity\\pv-creativity\\outputS.txt' with lines \n"
			);

}
void PVCreativityUI::cb_compute_i(Fl_Button*, void*) {

	calcola(refraction_holder, thickness_holder, K_holder, buff, L_T, K_, n, L);
}
void PVCreativityUI::cb_compute_plot(Fl_Button*, void*) {

	PlotIT();
}
void PVCreativityUI::cb_compute(Fl_Button* o, void* v) {
  ((PVCreativityUI*)(o->parent()->parent()->user_data()))->cb_compute_i(o,v);
}
void PVCreativityUI::cb_computePlot(Fl_Button* o, void* v) {
	((PVCreativityUI*)(o->parent()->parent()->user_data()))->cb_compute_plot(o, v);
}

 void assignFile(Fl_File_Chooser* w, void* userdata)
{
    std::cout << "FILE: " << w->value();
	nomeFile = w->value();
	//nf = w->value();
	vertices = panel_io::load_vertices(nomeFile);
	std::cout << " SIZE VERTEXSSS: " << vertices.size();
	init(vertices);
	panel_opengl::draw(vertices);
	
	
	
}
void open_input_file()
{

	Fl_File_Chooser *fc = new Fl_File_Chooser(".", NULL, 0, "Input File");
	fc->callback(assignFile);
	fc->show();
	
}
PVCreativityUI::PVCreativityUI() {
  { 
		//double taualpha_n, double M, double G_B, double R_B, double K_theta_B

		window = new Fl_Double_Window(1024, 800, "Photovoltaic Creativity");
        window->user_data((void*)(this));
       {
			Fl_Group* o = new Fl_Group(640, 40, 230, 585, "Input Values");
            o->box(FL_THIN_UP_BOX);
	        { 
			  openfile = new Fl_Button(660, 50, 195, 20, "Segli File");
			  openfile->callback((Fl_Callback*)open_input_file);

			} // Fl_Value_Input* beta
			{ 
			  compute = new Fl_Button(660, 590, 195, 20, "Compute");
			  compute->callback((Fl_Callback*)cb_compute);
			}
			{
				compute = new Fl_Button(660, 550, 195, 20, "Plot It");
				compute->callback((Fl_Callback*)cb_computePlot);
			}
			{ 
				L_T = new Fl_Value_Input(760, 150, 95, 23, "Glass Thickness");
				L_T->value(0.002);
				
			}
			{ 
				K_ = new Fl_Value_Input(760, 210, 95, 23, "Fattore Kappa (K)");
				K_->maximum(100);
				K_->value(4);
				
			} 
			{ 
				n = new Fl_Value_Input(760, 180, 95, 23, "Refraction index");
				n->maximum(10);
				n->value(1.526);
				
			}
			{
				L = new Fl_Value_Input(760, 240, 95, 23, "Latitude");
				double lat = (44 / 180 * M_PI);
				L->value(lat);

			}

 
			o->end();
		 } // Fl_Group* o
		{
			
		   panel = new PanelView(25, 25, 600, 600, "pframe");
      
		 } // PanelView* panel
		 {
			
		
			buff = new Fl_Text_Buffer();
			results = new Fl_Text_Display(25, 645, 600, 150, "Results");
			results->textcolor(FL_BLACK);
			results->buffer(buff);
			window->resizable(results);
		 } 
		window->end();
  } 
}

void PVCreativityUI::show(int argc, char **argv) {
  this->window->show(argc,argv);
  nomeFile = "C:/Users/andre/source/repos/Progetto/geometries/trianglesCirc2.csv";
  vertices = panel_io::load_vertices(nomeFile);
}
